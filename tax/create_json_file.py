import json
import pandas as pd
import os

FEDERAL_SINGLE = [
    (14500, 0.00, 0.77),
    (14600, 0.75, 0.77),
    (15000, 3.85, 0.77),
    (16000, 11.55, 0.77),
    (17000, 19.25, 0.77),
    (18000, 26.95, 0.77),
    (19000, 34.65, 0.77),
    (20000, 42.35, 0.77),
    (21000, 50.05, 0.77),
    (22000, 57.75, 0.77),
    (23000, 65.45, 0.77),
    (24000, 73.15, 0.77),
    (25000, 80.85, 0.77),
    (26000, 88.55, 0.77),
    (29000, 111.65, 0.77),
    (30000, 119.35, 0.77),
    (31000, 127.05, 0.77),
    (31700, 132.55, 0.88),
    (32000, 135.15, 0.88),
    (33000, 144.00, 0.88),
    (34000, 152.75, 0.88),
    (35000, 161.55, 0.88),
    (36000, 170.35, 0.88),
    (37000, 179.15, 0.88),
    (38000, 187.95, 0.88),
    (39000, 196.75, 0.88),
    (40000, 205.55, 0.88),
    (41000, 214.35, 0.88),
    (41500, 220.50, 2.64),
    (42000, 233.70, 2.64),
    (43000, 260.10, 2.64),
    (44000, 286.50, 2.64),
    (45000, 312.90, 2.64),
    (46000, 339.30, 2.64),
    (47000, 365.70, 2.64),
    (48000, 392.10, 2.64),
    (49000, 418.50, 2.64),
    (50000, 444.90, 2.64),
    (51000, 471.30, 2.64),
    (52000, 497.70, 2.64),
    (53000, 524.10, 2.64),
    (54000, 550.50, 2.64),
    (55000, 576.90, 2.64),
    (55300, 585.15, 2.97),
    (56000, 605.95, 2.97),
    (57000, 635.65, 2.97),
    (58000, 665.35, 2.97),
    (59000, 695.05, 2.97),
    (60000, 724.75, 2.97),
    (61000, 754.45, 2.97),
    (62000, 784.15, 2.97),
    (63000, 813.85, 2.97),
    (64000, 843.55, 2.97),
    (65000, 873.25, 2.97),
    (66000, 902.95, 2.97),
    (67000, 932.65, 2.97),
    (68000, 962.35, 2.97),
    (69000, 992.05, 2.97),
    (70000, 1021.75, 2.97),
    (71000, 1051.45, 2.97),
    (72000, 1081.15, 2.97),
    (72600, 1101.90, 5.94),
    (73000, 1125.70, 5.94),
    (74000, 1185.10, 5.94),
    (75000, 1244.50, 5.94),
    (76000, 1303.90, 5.94),
    (77000, 1363.30, 5.94),
    (78000, 1422.70, 5.94),
    (78200, 1435.20, 6.60),
    (79000, 1488.00, 6.60),
    (80000, 1554.00, 6.60),
    (85000, 1884.00, 6.60),
    (90000, 2214.00, 6.60),
    (95000, 2544.00, 6.60),
    (100000, 2874.00, 6.60),
    (103700, 3120.40, 8.80),
    (110000, 3674.80, 8.80),
    (120000, 4554.80, 8.80),
    (130000, 5434.80, 8.80),
    (134700, 5850.60, 11.00),
    (140000, 6433.60, 11.00),
    (150000, 7533.60, 11.00),
    (176100, 10406.80, 13.20),
    (200000, 13561.60, 13.20),
    (250000, 20161.60, 13.20),
    (300000, 26761.60, 13.20),
    (350000, 33361.60, 13.20),
    (400000, 39961.60, 13.20),
    (450000, 46561.60, 13.20),
    (500000, 53161.60, 13.20),
    (550000, 59761.60, 13.20),
    (600000, 66361.60, 13.20),
    (650000, 72961.60, 13.20),
    (700000, 79561.60, 13.20),
    (750000, 86161.60, 13.20),
    (755300, 86859.50, 11.50),
    (800000, 92000.00, 11.50),
    (850000, 97750.00, 11.50),
]


FEDERAL_MARRIED = [
    (28300, 0.00, 1.00),
    (29000, 7.00, 1.00),
    (30000, 17.00, 1.00),
    (31000, 27.00, 1.00),
    (32000, 37.00, 1.00),
    (33000, 47.00, 1.00),
    (34000, 57.00, 1.00),
    (35000, 67.00, 1.00),
    (36000, 77.00, 1.00),
    (37000, 87.00, 1.00),
    (38000, 97.00, 1.00),
    (39000, 107.00, 1.00),
    (40000, 117.00, 1.00),
    (41000, 127.00, 1.00),
    (42000, 137.00, 1.00),
    (43000, 147.00, 1.00),
    (44000, 157.00, 1.00),
    (45000, 167.00, 1.00),
    (46000, 177.00, 1.00),
    (47000, 187.00, 1.00),
    (48000, 197.00, 1.00),
    (49000, 207.00, 1.00),
    (50000, 217.00, 1.00),
    (51000, 228.00, 2.00),
    (52000, 248.00, 2.00),
    (53000, 268.00, 2.00),
    (54000, 288.00, 2.00),
    (55000, 308.00, 2.00),
    (56000, 328.00, 2.00),
    (57000, 348.00, 2.00),
    (58000, 368.00, 2.00),
    (58500, 379.00, 3.00),
    (59000, 394.00, 3.00),
    (60000, 424.00, 3.00),
    (61000, 454.00, 3.00),
    (62000, 484.00, 3.00),
    (63000, 514.00, 3.00),
    (64000, 544.00, 3.00),
    (65000, 574.00, 3.00),
    (66000, 604.00, 3.00),
    (67000, 634.00, 3.00),
    (68000, 664.00, 3.00),
    (69000, 694.00, 3.00),
    (70000, 724.00, 3.00),
    (71000, 754.00, 3.00),
    (72000, 784.00, 3.00),
    (73000, 814.00, 3.00),
    (74000, 844.00, 3.00),
    (75000, 874.00, 3.00),
    (75400, 887.00, 4.00),
    (76000, 911.00, 4.00),
    (77000, 951.00, 4.00),
    (78000, 991.00, 4.00),
    (79000, 1031.00, 4.00),
    (80000, 1071.00, 4.00),
    (81000, 1111.00, 4.00),
    (82000, 1151.00, 4.00),
    (83000, 1191.00, 4.00),
    (84000, 1231.00, 4.00),
    (85000, 1271.00, 4.00),
    (86000, 1311.00, 4.00),
    (87000, 1351.00, 4.00),
    (88000, 1391.00, 4.00),
    (89000, 1431.00, 4.00),
    (90000, 1471.00, 4.00),
    (90400, 1488.00, 5.00),
    (91000, 1518.00, 5.00),
    (92000, 1568.00, 5.00),
    (93000, 1618.00, 5.00),
    (94000, 1668.00, 5.00),
    (95000, 1718.00, 5.00),
    (96000, 1768.00, 5.00),
    (97000, 1818.00, 5.00),
    (98000, 1868.00, 5.00),
    (99000, 1918.00, 5.00),
    (100000, 1968.00, 5.00),
    (103500, 2144.00, 6.00),
    (110000, 2534.00, 6.00),
    (114800, 2823.00, 13.00),
    (250000, 19062.00, 13.00),
    (300000, 25562.00, 13.00),
    (350000, 32062.00, 13.00),
    (400000, 38562.00, 13.00),
    (450000, 45062.00, 13.00),
    (500000, 51562.00, 13.00),
    (550000, 58062.00, 13.00),
    (600000, 64562.00, 13.00),
    (650000, 71062.00, 13.00),
    (700000, 77562.00, 13.00),
    (750000, 84062.00, 13.00),
    (800000, 90562.00, 13.00),
    (850000, 97062.00, 13.00),
    (896000, 103040.00, 11.50),
]


def main():
    tax_rates_dict = dict()
    file_name = "2020/tax_rates.json"
    with open(file_name, "r") as read_file:
        tax_rates_dict = json.load(read_file)
    if "federal" not in tax_rates_dict.keys():
        tax_rates_dict["federal"] = {"single": None, "married": None}
        tax_rates_dict["federal"]["single"] = {
            "taxable_income": [
                federal_income for federal_income, _, _ in FEDERAL_SINGLE
            ],
            "tax_rate": [tax_rate for _, tax_rate, _ in FEDERAL_SINGLE],
            "tax": [tax for _, _, tax in FEDERAL_SINGLE],
        }
        tax_rates_dict["federal"]["married"] = {
            "taxable_income": [
                federal_income for federal_income, _, _ in FEDERAL_MARRIED
            ],
            "tax_rate": [tax_rate for _, tax_rate, _ in FEDERAL_MARRIED],
            "tax": [tax for _, _, tax in FEDERAL_MARRIED],
        }
        with open(file_name, "w") as outfile:
            json.dump(tax_rates_dict, outfile, indent=4)
    path_steuerfuss = "2020/gsheet.csv"
    if os.path.exists(path_steuerfuss):
        df = pd.read_csv(path_steuerfuss, index_col=0)
        steuerfuss_dict = {
            community: df.loc[community].values[0] for community in df.index
        }
        with open("2020/steuerfuss.json", "w") as outfile:
            json.dump(steuerfuss_dict, outfile, indent=4)
    # if os.path.exists(path_steuerfuss):
    #     df = pd.read_csv(file_name)
    #     print(df)


if __name__ == "__main__":
    main()
